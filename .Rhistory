if(doorChoice==carLocation){
x<-TRUE
}
else{
x<-FALSE
}
return(x) #Returns TRUE if equal & FALSE if not
}
myFunction(sample(1:3, 1), sample(1:3, 1))
setClass(Class="door", #Defined new S4 class door
representation = representation(
chosenDoor = "numeric", #chosenDoor integer (1, 2 or 3)
carDoor = "numeric", #carDoor integer (1, 2 or 3)
switch = "logical", #switch boolean indicating whether player adopted strategy of staying with first choice (FALSE) or switching to remaining door (TRUE)
winner = "logical" #winner boolean indicating whether or not final chosen door same as car door
),
prototype = prototype(
chosenDoor = c(),
carDoor = c(),
switch = c(),
winner = c()
)
)
new("door") #Construction function allows user to create door object
setValidity("door", function(object){ #Validation function checks whether values stored in slots appropriately structured
if(!(object@chosenDoor %in% 1:3)){
return("@chosenDoor is not a valid value")
}
if(!(object@carDoor %in% 1:3)){
return("@carDoor is not a valid value")
}
if(!(object@switch %in% c(TRUE,FALSE))){
return("@switch is not a valid value")
}
if(!(object@winner %in% c(TRUE,FALSE))){
return("@winner is not a valid value")
}
}
)
setGeneric("PlayGame", #Created generic
function(object="door"){
standardGeneric("PlayGame")
})
setMethod("PlayGame", "door", #Created method for door objects called PlayGame
function(object){
object@carDoor<-sample(1:3, 1) #Draws random number between 1 & 3 that presents door behind which car hidden & adds to carDoor slot
first<-sample(1:3, 1) #Draws random number between 1 & 3 that presents door chosen first
if(object@switch==FALSE){ #If switch=FALSE, random draw added to chosenDoor slot
object@chosenDoor<-first
}
else if(object@switch==TRUE){ #If switch=TRUE, random door chosen such that
a<-object@carDoor #Does not contain car
b<-object@chosenDoor #Not first door chosen by contestant
remove<-1:3
if(a!=b){
remove<-remove[-c(a,b)]
}
else if(a==b){
remove<-sample(remove[-a], 1)
}
contention<-1:3
object@chosenDoor<-sample(contention[-remove], 1) #Door removed from contention. Player chooses at random between doors not removed. Added to chosenDoor slot.
}
if(object@carDoor==object@chosenDoor){ #Compares two door slots
object@winner<-TRUE #If same, changes winner to TRUE
}
else{
object@winner<-FALSE #If not same, changes winner to FALSE
}
})
simulationNot<-new("door", chosenDoor = sample(1:3, 1), carDoor = sample(1:3, 1), switch = FALSE)
simulationNot<-new("door", chosenDoor = sample(1:3, 1), carDoor = sample(1:3, 1), switch = FALSE, winner = FALSE)
percentage<-0
for(i in 1:1000){
if(PlayGame(simulationNot)@winner==TRUE){
percentage<-percentage+1
}
}
percentage/1000
for(i in 1:1000){
print(PlayGame(simulationNot)@winner)
if(PlayGame(simulationNot)@winner==TRUE){
percentage<-percentage+1
}
}
simulationNot<-new("door", chosenDoor = sample(1:3, 1), carDoor = sample(1:3, 1), switch = FALSE, winner = FALSE)
percentage<-0
PlayGame(simulationNot)@winner
simulationNot@winner
PlayGame(simulationNot)
simulationNot@winner
PlayGame(simulationNot)
simulationNot@winner
simulationNot<-PlayGame(simulationNot)
simulationNot@winner
simulationNot<-new("door", chosenDoor = sample(1:3, 1), carDoor = sample(1:3, 1), switch = FALSE, winner = FALSE)
percentage<-0
PlayGame(simulationNot)@winner
simulationNot
PlayGame(simulationNot)
slot(PlayGame(simulationNot),"winner")
rm(list=ls())
?rnorm
?roxygen
sessioninfo()
sessionInfo()
sessionInfo()
install.packages("Rcpp")
library(Rcpp)
library(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
evalCpp("2+2")
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
add(1, 2, 3)
expect_that(10, equals(10))
?expect
apropos(expect)
apropos("expect")
library(testthat)
test_check("squaresPack")
context("Adding squares")
test_that("squares add correctly", {
expect_that(addSquares(2,3),
equals(new("Squares", square=(13), x = 2, y = 3)))
expect_that(addSquares(2,3),
equals(new("Squares", square=(8), x = 2, y = 2)))
})
current.code <- as.package("squaresPack")
current.code <- as.package("squaresPack")
?as.package_version
?as.package
current.code<-as.package_version("squaresPack")
current.code<-as.package_version("/Users/rohangupta/Documents/WUSTL/SP2018/Pol Sci/MoreFilesYouNeed/squaresPack")
?test_that
addSquares(2,3)
#' Adding squared values
#'
#' Finds the sum of squared numbers
#'
#' @param x A numeric object
#' @param y A numeric object with the same dimensionality as \code{x}.
#'
#' @return An object of class Squares containing
#'  \item{squares}{The sum of the squared values}
#'  \item{x}{The first object input}
#'  \item{y}{The second object input}
#' @author Jacob M. Montgomery
#' @note This is a very simple function
#' @examples
myX <- c(20, 3)
myY <- c(-2, 4.1)
addSquares(myX, myY)
@seealso \code{\link{subtractSquares}}
@rdname addSquares
@aliases addSquares,ANY-method
@export
setGeneric(name="addSquares",
def=function(x, y, ...)
{standardGeneric("addSquares")}
)
#' @export
setMethod(f="addSquares",
definition=function(x, y, ...){
return(new("Squares", square=(x^2 + y^2), x = x, y = y))
}
)
addSquares(2, 3)
rm(list=ls())
library(plyr)
bip<-read.csv("/Users/rohangupta/Documents/WUSTL/Analytics/SABR/battedballs.csv",stringsAsFactors=FALSE,na="null")
clean<-subset(bip,bip$hit_distance_sc!="null")
la<-clean[,c("player_name","launch_angle")]
avgla<-aggregate(la$launch_angle,by=list(la$player_name),FUN=mean)
bip_count<-count(la,"player_name")
colnames(bip_count)<-c("player_name","bip")
avgla<-merge(bip_count,avgla,by.x="player_name",by.y="Group.1")
colnames(avgla)<-c("player_name","bip","avgla")
odorla<-clean$launch_angle[clean$player_name=="Rougned Odor"]
odorev<-clean$launch_speed[clean$player_name=="Rougned Odor"]
odor<-data.frame(cbind(odorla,odorev))
perezla<-clean$launch_angle[clean$player_name=="Salvador Perez"]
perezev<-clean$launch_speed[clean$player_name=="Salvador Perez"]
perez<-data.frame(cbind(perezla,perezev))
bettsla<-clean$launch_angle[clean$player_name=="Mookie Betts"]
bettsev<-clean$launch_speed[clean$player_name=="Mookie Betts"]
betts<-data.frame(cbind(bettsla,bettsev))
yelichla<-clean$launch_angle[clean$player_name=="Christian Yelich"]
yelichev<-clean$launch_speed[clean$player_name=="Christian Yelich"]
yelich<-data.frame(cbind(yelichla,yelichev))
plot(clean$launch_angle,clean$launch_speed,col="gray")
View(clean)
plot(clean$release_pos_x,clean$release_pos_y)
plot(clean$release_pos_x,clean$release_pos_z)
install.packages("plot3D")
library(plot3D)
scatter3D(clean$release_pos_x,clean$release_pos_y,clean$release_pos_z)
rhp<-subset(clean,clean$p_throws=="R")
scatter3D(rhp$release_pos_x,rhp$release_pos_y,rhp$release_pos_z)
scatter3D(rhp$release_pos_x,rhp$release_pos_y,rhp$release_pos_z,theta=0,phi=0)
scatter3D(rhp$release_pos_x,rhp$release_pos_y,rhp$release_pos_z,theta=0,phi=15)
scatter3D(rhp$release_pos_x,rhp$release_pos_y,rhp$release_pos_z,theta=15,phi=0)
scatter3D(rhp$release_pos_x,rhp$release_pos_y,rhp$release_pos_z,theta=45,phi=0)
rhp<-subset(clean,clean$p_throws=="L" && clean$events=="home_run")
rhp<-subset(clean,clean$p_throws=="L" & clean$events=="home_run")
scatter3D(rhp$release_pos_x,rhp$release_pos_y,rhp$release_pos_z)
scatter3D(rhp$release_pos_x,rhp$release_pos_y,rhp$release_pos_z,phi=10)
scatter3D(rhp$release_pos_x,rhp$release_pos_y,rhp$release_pos_z,phi=10,type="h")
mode(clean$pitcher)
mean(clean$pitcher)
mode(clean$pitcher)
rhp<-subset(clean,clean$pitcher=="502130")
scatter3D(rhp$release_pos_x,rhp$release_pos_y,rhp$release_pos_z)
plot(clean$release_speed,clean$launch_speed)
rhp<-subset(clean,clean$events=="home_run")
points(rhp$release_speed,rhp$launch_speed,col="gray")
plot(clean$release_speed,clean$release_spin_rate)
points(rhp$release_speed,rhp$release_spin_rate,col="red")
rm(list=ls())
library(plyr)
bip<-read.csv("/Users/rohangupta/Documents/WUSTL/Analytics/SABR/battedballs.csv",stringsAsFactors=FALSE,na="null")
clean<-subset(bip,bip$hit_distance_sc!="null")
la<-clean[,c("player_name","launch_angle")]
avgla<-aggregate(la$launch_angle,by=list(la$player_name),FUN=mean)
bip_count<-count(la,"player_name")
colnames(bip_count)<-c("player_name","bip")
avgla<-merge(bip_count,avgla,by.x="player_name",by.y="Group.1")
colnames(avgla)<-c("player_name","bip","avgla")
odorla<-clean$launch_angle[clean$player_name=="Rougned Odor"]
odorev<-clean$launch_speed[clean$player_name=="Rougned Odor"]
odor<-data.frame(cbind(odorla,odorev))
perezla<-clean$launch_angle[clean$player_name=="Salvador Perez"]
perezev<-clean$launch_speed[clean$player_name=="Salvador Perez"]
perez<-data.frame(cbind(perezla,perezev))
bettsla<-clean$launch_angle[clean$player_name=="Mookie Betts"]
bettsev<-clean$launch_speed[clean$player_name=="Mookie Betts"]
betts<-data.frame(cbind(bettsla,bettsev))
yelichla<-clean$launch_angle[clean$player_name=="Christian Yelich"]
yelichev<-clean$launch_speed[clean$player_name=="Christian Yelich"]
yelich<-data.frame(cbind(yelichla,yelichev))
mean(odor$odorla)
rm(list=ls())
library(plyr)
bip<-read.csv("/Users/rohangupta/Documents/WUSTL/Analytics/SABR/battedballs.csv",stringsAsFactors=FALSE,na="null")
clean<-subset(bip,bip$hit_distance_sc!="null")
la<-clean[,c("player_name","launch_angle")]
avgla<-aggregate(la$launch_angle,by=list(la$player_name),FUN=mean)
bip_count<-count(la,"player_name")
colnames(bip_count)<-c("player_name","bip")
avgla<-merge(bip_count,avgla,by.x="player_name",by.y="Group.1")
colnames(avgla)<-c("player_name","bip","avgla")
odorla<-clean$launch_angle[clean$player_name=="Rougned Odor"]
odorev<-clean$launch_speed[clean$player_name=="Rougned Odor"]
odor<-data.frame(cbind(odorla,odorev))
perezla<-clean$launch_angle[clean$player_name=="Salvador Perez"]
perezev<-clean$launch_speed[clean$player_name=="Salvador Perez"]
perez<-data.frame(cbind(perezla,perezev))
bettsla<-clean$launch_angle[clean$player_name=="Mookie Betts"]
bettsev<-clean$launch_speed[clean$player_name=="Mookie Betts"]
betts<-data.frame(cbind(bettsla,bettsev))
yelichla<-clean$launch_angle[clean$player_name=="Christian Yelich"]
yelichev<-clean$launch_speed[clean$player_name=="Christian Yelich"]
yelich<-data.frame(cbind(yelichla,yelichev))
View(clean)
View(clean)
plot(yelich)
minusjudge<-subset(clean,clean$player_name!="Aaron Judge")
judge<-subset(clean,clean$player_name=="Aaron Judge")
plot(minusjudge$launch_angle,minusjudge$launch_speed,col="gray")
points(judge$launch_angle,judge$launch_speed)
plot(clean$launch_speed,clean$hit_distance_sc)
plot(clean$launch_speed,clean$hit_distance_sc,col="gray")
points(judge$launch_speed,judge$hit_distance_sc)
?plot
plot(clean$launch_speed,clean$hit_distance_sc,clean$player_name=="Aaron Judge")
plot(clean$release_extension,clean$release_spin_rate)
plot(clean$release_extension,clean$release_speed)
this<-lm(clean$release_speed ~ clean$release_extension)
summary(this)
?lines
lines(this)
abline(this,col="red")
f <- lm(clean$launch_speed ~ clean$launch_angle)
summary(f)
plot(clean$launch_angle,clean$launch_speed)
abline(f,col="red")
f<-lm(clean$babip_value ~ clean$launch_angle + clean$launch_speed + clean$release_pos_z)
summary(f)
f<-lm(clean$babip_value ~ clean$launch_angle + clean$launch_speed)
summary(f)
plot(clean$plate_z)
hist(clean$plate_z)
hist(clean$plate_z,breaks=50)
hist(clean$plate_z,breaks=100)
hist(clean$plate_z,breaks=10000)
hist(clean$plate_z,breaks=100000)
hist(clean$plate_z,breaks=1000)
mean(clean$plate_z)
plot(clean$plate_x,clean$plate_z)
christianyelich<-subset(clean,clean$player_name=="Christian Yelich")
hist(christianyelich$plate_z,breaks=50)
sd(christianyelich$plate_z)
hist(clean$plate_z,breaks=1000)
hist(clean$plate_z,breaks=100000)
hist(clean$plate_z,breaks=1000)
hist(clean$plate_x,breaks=1000)
hist(clean$plate_z,breaks=1000,add=T)
rm(list=ls())
library(plyr)
bip17<-read.csv("/Users/rohangupta/Documents/WUSTL/Analytics/SABR/battedballs17.csv",stringsAsFactors=FALSE,na="null")
clean17<-subset(bip17,bip17$hit_distance_sc!="null")
bip16<-read.csv("/Users/rohangupta/Documents/WUSTL/Analytics/SABR/battedballs16.csv",stringsAsFactors=FALSE,na="null")
clean16<-subset(bip16,bip16$hit_distance_sc!="null")
la<-clean17[,c("player_name","launch_angle")]
avgla<-aggregate(la$launch_angle,by=list(la$player_name),FUN=mean)
bip_count<-count(la,"player_name")
colnames(bip_count)<-c("player_name","bip")
avgla<-merge(bip_count,avgla,by.x="player_name",by.y="Group.1")
colnames(avgla)<-c("player_name","bip","avgla")
odorla<-clean17$launch_angle[clean17$player_name=="Rougned Odor"]
odorev<-clean17$launch_speed[clean17$player_name=="Rougned Odor"]
odor<-data.frame(cbind(odorla,odorev))
perezla<-clean17$launch_angle[clean17$player_name=="Salvador Perez"]
perezev<-clean17$launch_speed[clean17$player_name=="Salvador Perez"]
perez<-data.frame(cbind(perezla,perezev))
bettsla<-clean17$launch_angle[clean17$player_name=="Mookie Betts"]
bettsev<-clean17$launch_speed[clean17$player_name=="Mookie Betts"]
betts<-data.frame(cbind(bettsla,bettsev))
yelichla<-clean17$launch_angle[clean17$player_name=="Christian Yelich"]
yelichev<-clean17$launch_speed[clean17$player_name=="Christian Yelich"]
yelich<-data.frame(cbind(yelichla,yelichev))
z<-lm(clean17$plate_z~clean16$plate_z)
View(clean16)
zagg17<-aggregate(clean17$plate_z,by=list(clean17$player_name),FUN=mean)
zagg16<-aggregate(clean16$plate_z,by=list(clean16$player_name),FUN=mean)
merge(zagg17,zagg16)
?merge
zagg<-merge(zagg17,zagg16)
zagg<-merge(zagg17,zagg16,by=list(zagg17$Group.1))
zagg<-merge(zagg17,zagg16,by.x=list(zagg17$Group.1))
zagg<-merge(zagg17,zagg16,by.x=intersect(zagg17$Group.1,zagg16$Group.1))
zagg<-merge(zagg17,zagg16,by=intersect(zagg17$Group.1,zagg16$Group.1))
rm(list=ls())
library(plyr)
bip17<-read.csv("/Users/rohangupta/Documents/WUSTL/Analytics/SABR/battedballs17.csv",stringsAsFactors=FALSE,na="null")
clean17<-subset(bip17,bip17$hit_distance_sc!="null")
bip16<-read.csv("/Users/rohangupta/Documents/WUSTL/Analytics/SABR/battedballs16.csv",stringsAsFactors=FALSE,na="null")
clean16<-subset(bip16,bip16$hit_distance_sc!="null")
la<-clean17[,c("player_name","launch_angle")]
avgla<-aggregate(la$launch_angle,by=list(la$player_name),FUN=mean)
bip_count<-count(la,"player_name")
colnames(bip_count)<-c("player_name","bip")
avgla<-merge(bip_count,avgla,by.x="player_name",by.y="Group.1")
colnames(avgla)<-c("player_name","bip","avgla")
odorla<-clean17$launch_angle[clean17$player_name=="Rougned Odor"]
odorev<-clean17$launch_speed[clean17$player_name=="Rougned Odor"]
odor<-data.frame(cbind(odorla,odorev))
perezla<-clean17$launch_angle[clean17$player_name=="Salvador Perez"]
perezev<-clean17$launch_speed[clean17$player_name=="Salvador Perez"]
perez<-data.frame(cbind(perezla,perezev))
bettsla<-clean17$launch_angle[clean17$player_name=="Mookie Betts"]
bettsev<-clean17$launch_speed[clean17$player_name=="Mookie Betts"]
betts<-data.frame(cbind(bettsla,bettsev))
yelichla<-clean17$launch_angle[clean17$player_name=="Christian Yelich"]
yelichev<-clean17$launch_speed[clean17$player_name=="Christian Yelich"]
yelich<-data.frame(cbind(yelichla,yelichev))
platez17<-aggregate(clean17$plate_z,by=list(clean17$player_name),FUN=mean)
platez16<-aggregate(clean16$plate_z,by=list(clean16$player_name),FUN=mean)
View(platez16)
View(platez17)
platez<-merge(platez17,platez16,by.x="Group.1",by.y="Group.1")
platez$x.x<-as.numeric(x.x)
platez$x.x<-as.numeric(platez$x.x)
platez$x.y<-as.numeric(platez$x.y)
platez<-merge(platez17,platez16,by="Group.1")
rm(list=ls())
library(plyr)
bip17<-read.csv("/Users/rohangupta/Documents/WUSTL/Analytics/SABR/battedballs17.csv",stringsAsFactors=FALSE,na="null")
clean17<-subset(bip17,bip17$hit_distance_sc!="null")
bip16<-read.csv("/Users/rohangupta/Documents/WUSTL/Analytics/SABR/battedballs16.csv",stringsAsFactors=FALSE,na="null")
clean16<-subset(bip16,bip16$hit_distance_sc!="null")
la<-clean17[,c("player_name","launch_angle")]
avgla<-aggregate(la$launch_angle,by=list(la$player_name),FUN=mean)
bip_count<-count(la,"player_name")
colnames(bip_count)<-c("player_name","bip")
avgla<-merge(bip_count,avgla,by.x="player_name",by.y="Group.1")
colnames(avgla)<-c("player_name","bip","avgla")
odorla<-clean17$launch_angle[clean17$player_name=="Rougned Odor"]
odorev<-clean17$launch_speed[clean17$player_name=="Rougned Odor"]
odor<-data.frame(cbind(odorla,odorev))
perezla<-clean17$launch_angle[clean17$player_name=="Salvador Perez"]
perezev<-clean17$launch_speed[clean17$player_name=="Salvador Perez"]
perez<-data.frame(cbind(perezla,perezev))
bettsla<-clean17$launch_angle[clean17$player_name=="Mookie Betts"]
bettsev<-clean17$launch_speed[clean17$player_name=="Mookie Betts"]
betts<-data.frame(cbind(bettsla,bettsev))
yelichla<-clean17$launch_angle[clean17$player_name=="Christian Yelich"]
yelichev<-clean17$launch_speed[clean17$player_name=="Christian Yelich"]
yelich<-data.frame(cbind(yelichla,yelichev))
platez17<-aggregate(clean17$plate_z,by=list(clean17$player_name),FUN=mean)
platez16<-aggregate(clean16$plate_z,by=list(clean16$player_name),FUN=mean)
platez<-merge(platez17,platez16,by="Group.1")
hist(platez,breaks=50)
platez$x.x<-as.numeric(platez$x.x)
hist(platez,breaks=50)
platez$x.y<-as.numeric(platez$x.y)
hist(platez,breaks=50)
platez<-merge(platez17,platez16,by.x="Group.1",by.y="Group.1")
hist(platez,breaks=50)
View(platez)
colnames(platez)<-c("platez17","platez16")
platez<-merge(platez17,platez16,by="Group.1")
colnames(platez)<-c("player_name","platez17","platez16")
z<-lm(platez$platez17~platez$platez16)
summary(z)
mean(platez17)
mean(platez$platez17)
mean(platez$platez16)
mean(platez$platez17)
platez$platez17<-as.numeric(platez$platez17)
mean(platez$platez17)
summary(z)
hist(clean16$plate_z)
hist(clean16$plate_z,breaks=1000)
hist(clean17$plate_z,breaks=1000,add=T,col="gray")
hist(clean16$plate_z,breaks=1000,col="gray")
hist(clean16$plate_z,breaks=1000,col="gray")
hist(clean16$plate_z,breaks=50,col="gray")
hist(clean17$plate_z,breaks=50,add=T)
hist(clean16$plate_z,breaks=50,col="gray",xlab="Variable")
hist(clean17$plate_z,breaks=50,add=T)
hist(clean16$plate_z,breaks=50,col="red",xlab="Variable")
hist(clean17$plate_z,breaks=50,add=T,col="blue")
hist(clean16$plate_z,breaks=50,col=rgb(1,0,0,.5),xlab="Variable")
hist(clean17$plate_z,breaks=50,add=T,col=rgb(0,0,1,.5))
hist(clean16$plate_z,breaks=1000,col=rgb(1,0,0,.5),xlab="Variable")
hist(clean16$plate_z,breaks=100,col=rgb(1,0,0,.5),xlab="Variable")
hist(clean17$plate_z,breaks=100,add=T,col=rgb(0,0,1,.5))
hist(clean17$plate_z,breaks=100,col=rgb(0,0,1,.5))
hist(clean16$plate_z,breaks=100,col=rgb(1,0,0,.5),add=T)
hist(clean16$plate_z,breaks=100,col=rgb(1,0,0,.5),xlab="Variable")
hist(clean17$plate_z,breaks=100,col=rgb(0,0,1,.5),add=T)
View(clean16)
View(clean17)
fastballs<-subset(clean17,clean17$pitch_type=="FF")
sliders<-subset(clean17,clean17$pitch_type=="SL")
hist(fastballs$plate_z)
hist(fastballs$plate_z,breaks=50)
hist(fastballs$plate_z,breaks=50,col="red")
hist(sliders$plate_z,breaks=50,col="blue",add=T)
change<-subset(clean17,clean17$pitch_type=="CH")
hist(change$plate_z,breaks=50,col="green",add=T)
curve<-subset(clean17,clean17$pitch_type=="CU")
hist(curve$plate_z,breaks=50,col="purple",add=T)
knuckle<-subset(clean17,clean17$pitch_type=="KN")
hist(knuckle$plate_z,breaks=50,col="yellow",add=T)
hist(knuckle$plate_z,breaks=50,col="yellow")
knuckle2<-subset(clean16,clean16$pitch_type=="KN")
hist(knuckle2$plate_z,breaks=50,col="red",add=T)
hist(knuckle2$plate_z,breaks=50,col="red")
hist(knuckle$plate_z,breaks=50,col="blue",add=T)
plot(knuckle2$release_speed,knuckle2$release_spin_rate)
rm(list=ls())
library(plyr)
bip17<-read.csv("/Users/rohangupta/Documents/WUSTL/Analytics/SABR/battedballs17.csv",stringsAsFactors=FALSE,na="null")
clean17<-subset(bip17,bip17$hit_distance_sc!="null")
hist(clean17$z_plate,freq=FALSE)
hist(clean17$plate_z,freq=FALSE)
hist(clean17$plate_z,freq=FALSE,breaks=1000)
hist(clean17$plate_x,freq=FALSE,breaks=1000,col="red",add=T)
hist(clean17$plate_x,freq=FALSE,breaks=50,col="red")
hist(clean17$plate_z,freq=FALSE,breaks=50,col="blue",add=T)
bip16<-read.csv("/Users/rohangupta/Documents/WUSTL/Analytics/SABR/battedballs16.csv",stringsAsFactors=FALSE,na="null")
clean16<-subset(bip16,bip16$hit_distance_sc!="null")
hist(clean17$plate_z,breaks=50,col="red")
hist(clean16$plate_z,breaks=50,col="blue",add=T)
hist(clean17$plate_z,breaks=50,col="red",add=T)
hist(clean16$plate_z,breaks=50,col="blue",freq=F)
hist(clean17$plate_z,breaks=50,col="red",add=T,freq=F)
rm(list=ls())
library(devtools)
library(roxygen2)
setwd("/Users/rohangupta/Documents/WUSTL/SP2018/Pol Sci/PS5")
current.code<-as.package("integrateIt")
load_all(current.code)
document(current.code)
check(current.code)
install(pkg=current.code, local=TRUE)
build(current.code, path=getwd())
printTrapezoid
getMethod(printTrapezoid, "Trapezoid")
x1<-c(1,2,3)
y1<-c(2,4,6)
z1<-c(1,3)
rule1<-"Trap"
allObj1<-integrateIt(x1, y1, z1, rule1)
allObj1
printTrapezoid(allObj1)
printSimpson
getMethod(printSimpson, "Simpson")
x2<-c(1,2,3)
y2<-c(2,4,6)
z2<-c(1,3)
rule2<-"Simpson"
allObj2<-integrateIt(x1, y1, z2, rule2)
allObj2
printSimpson(allObj2)
rm(list=ls())
